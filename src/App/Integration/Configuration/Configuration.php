<?php

namespace App\Integration\Configuration;

use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\NodeInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder();
        $rootNode = $treeBuilder->root('integration');

        /** @var ArrayNodeDefinition $rootNode */
        $rootNode
            ->children() 
                ->arrayNode('levels')
                    ->normalizeKeys(false)
                    ->defaultValue([])
                    ->prototype('array')
                        ->children()
                            ->integerNode('level')
                                ->isRequired()
                            ->end()
                            ->integerNode('points')
                                ->isRequired()
                            ->end()
                            ->scalarNode('label')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                            ->scalarNode('description')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('actions')
                    ->normalizeKeys(false)
                    ->defaultValue([])
                    ->prototype('array')
                        ->children()
                            ->scalarNode('label')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                            ->scalarNode('description')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('achievements')
                    ->normalizeKeys(false)
                    ->defaultValue([])
                    ->prototype('array')
                        ->addDefaultsIfNotSet()
                        ->children()
                            ->scalarNode('label')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                            ->scalarNode('description')
                                ->isRequired()
                                ->cannotBeEmpty()
                            ->end()
                            ->integerNode('points')
                                ->isRequired()
                            ->end()
                            ->arrayNode('actions')
                                ->prototype('scalar')->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('validators')
                    ->normalizeKeys(false)
                    ->defaultValue([])
                    ->prototype('array')
                        ->addDefaultsIfNotSet()
                        ->children()
                            ->scalarNode('type')
                                ->defaultValue('class')
                                ->validate()
                                    ->ifNotInArray(['expression', 'class'])
                                    ->thenInvalid('Invalid type %s')
                                ->end()
                            ->end()
                            ->scalarNode('class')
                                ->defaultNull()
                            ->end()
                            ->variableNode('arguments')
                                ->defaultValue([])
                                ->validate()
                                    ->ifString()
                                    ->thenInvalid('Configuration value must be array.')
                                ->end()
                            ->end()
                            ->variableNode('calls')
                                ->defaultValue([])
                                ->validate()
                                    ->ifString()
                                    ->thenInvalid('Configuration value must be array.')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('webhooks')
                    ->normalizeKeys(false)
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('incoming_processors')
                            ->normalizeKeys(false)
                            ->defaultValue([])
                            ->prototype('array')
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->scalarNode('type')
                                        ->defaultValue('class')
                                        ->validate()
                                            ->ifNotInArray(['chain', 'class', 'null', 'dummy', 'static-map'])
                                            ->thenInvalid('Invalid type %s')
                                        ->end()
                                    ->end()
                                    ->scalarNode('class')
                                        ->defaultNull()
                                    ->end()
                                    ->variableNode('arguments')
                                        ->defaultValue([])
                                        ->validate()
                                            ->ifString()
                                            ->thenInvalid('Configuration value must be array.')
                                        ->end()
                                    ->end()
                                    ->variableNode('calls')
                                        ->defaultValue([])
                                        ->validate()
                                        ->ifString()
                                            ->thenInvalid('Configuration value must be array.')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('outgoing_processors')
                            ->normalizeKeys(false)
                            ->defaultValue([])
                            ->prototype('array')
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->scalarNode('type')
                                        ->defaultValue('class')
                                        ->validate()
                                            ->ifNotInArray(['chain', 'class', 'null', 'dummy'])
                                            ->thenInvalid('Invalid type %s')
                                        ->end()
                                    ->end()
                                    ->scalarNode('class')
                                        ->defaultNull()
                                    ->end()
                                    ->variableNode('arguments')
                                        ->defaultValue([])
                                        ->validate()
                                            ->ifString()
                                            ->thenInvalid('Configuration value must be array.')
                                        ->end()
                                    ->end()
                                    ->variableNode('calls')
                                        ->defaultValue([])
                                        ->validate()
                                            ->ifString()
                                            ->thenInvalid('Configuration value must be array.')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
